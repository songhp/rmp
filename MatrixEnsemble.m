function Phi = MatrixEnsemble(n,m,ensemble)
% MatrixEnsemble: Generates a random matrix of size n by m.
%
%  Usage:
%     Phi = MatrixEnsemble(n,m,ensemble)
%  Inputs:
%    n          number of rows
%    m          number of columns
%    ensemble   string containing name of matrix ensemble:
%               'USE', 'RSE', 'Fourier', 'RST', 'Hadamard', 'URP', 'IR'. 
%               Default is 'USE'.
%  Outputs:
%    Phi        n by m matrix from the specified ensemble
%  Description:
%    This function creates a matrix from the specified random matrix 
%    ensemble. The following random ensembles are implemented:
%
%      'USE' - Uniform spherical ensemble. Columns are n-vectors, 
%      uniformly distributed on the sphere S^{n-1} (default).
%
%      'RSE' - Random signs ensemble. Entries in the matrix are 
%      chosen from a bernoulli +/-1 distribution, and columns are 
%      normalized to have unit euclidean length.
%
%      'Fourier' - Partial Fourier ensemble. Matrices in this ensemble 
%      are generated by taking the m by m Fourier matrix, sampling 
%      n rows at random, and scaling columns to have unit euclidean length.
%
%      'RST' - Partial RST (Real Fourier) ensemble. See 'Fourier' above.
%
%      'Hadamard' - Partial Hadamard ensemble. Matrices in this ensemble 
%      are generated by taking the m by m Hadamard matrix, sampling 
%      n rows at random, and scaling columns to have unit euclidean length.
%
%      'URP' - Uniform Random Projection ensemble. Matrices in this 
%      ensemble are generated by sampling n rows of an m by m 
%      random orthogonal matrix.
%
%      'IR' - Identity and Random otho-basis. An n by 2n matrix is 
%      constructed, as the concatenation of the n by n identity and 
%      an n x n random ortho-basis. 
%
%  See Also
%    SparseVector

if nargin < 3,
    ensemble = 'USE';
end

switch upper(ensemble)
    case 'USE'
        Phi = randn(n,m);

        % Normalize the columns of Phi
        Phi = Phi ./ repmat( sqrt(sum(Phi.^2)), [n 1] );
       

        
    case 'RSE'
        Phi = sign(rand([n m]) - 0.5);
        zz = find(Phi == 0);
        Phi(zz) = ones(size(zz));

        % Normalize the columns of Phi
        Phi = Phi ./ repmat( sqrt(sum(Phi.^2)), [n 1] );
        
    case 'HADAMARD'
        H = hadamard(m);
        p = randperm(m);
        Phi = H(p(1:n), :);
    
        % Normalize the columns of Phi
        Phi = Phi ./ repmat( sqrt(sum(Phi.^2)), [n 1] );
        
    case 'FOURIER'      
        [j, k] = meshgrid(0:(m-1));
        F = exp(-sqrt(-1) .* 2.*pi .* k .* j ./ m);
        F = F ./ sqrt(m); 

        p = randperm(m);
        Phi = F(p(1:n), :);       

        % %另一种方法
% F = fft(eye(n));
% r = randperm(n);
% A = F(r(1:m),:);
% % Normalize the columns of Phi
% Phi = Phi ./ repmat( sqrt(sum(Phi.^2)), [m 1] );


    
        % Normalize the columns of Phi
        Phi = Phi ./ repmat( sqrt(sum(Phi.^2)), [n 1] );

    case 'RST'
        H = eye(m);
        for jj = 1:m
            x= H(:,jj);
            y = fftshift(fft(fftshift(x)))./ sqrt(prod(size(x)));
            n = length(x);
            c = n/2+1;
            y(2:(c-1)) = sqrt(2) .* real(y(2:(c-1)));
            y((c+1):n) = -sqrt(2) .* imag(y((c+1):n));
            H(:,jj) =  y;
        end

        p = randperm(m);
        Phi = H(p(1:n), :);
    
        % Normalize the columns of Phi
        Phi = Phi ./ repmat( sqrt(sum(Phi.^2)), [n 1] );

    case 'URP'
        [U,S,V] = svd(rand(n,m),'econ');
        Phi = V';

        % Normalize the columns of Phi
        Phi = Phi ./ repmat( sqrt(sum(Phi.^2)), [n 1] );
        
    case 'IR'
        [Q,R] = qr(rand(n));
        Phi = [eye(n) Q];
        
end%
% Part of SparseLab Version:100
% Created Tuesday March 28, 2006
% This is Copyrighted Material
% For Copying permissions see COPYING.m
% Comments? e-mail sparselab@stanford.edu
%

